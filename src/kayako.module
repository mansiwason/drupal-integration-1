<?php
/**
 * @copyright      2001-2015 Kayako
 * @license        https://www.freebsd.org/copyright/freebsd-license.html
 * @link           https://github.com/kayako/drupal-integration
 */

/**
 * Displays help and module information.
 *
 * @param string $path
 * @param array  $arg
 *
 * @return string
 */
function kayako_help($path, $arg)
{
	switch ($path) {
		case "
    }admin/help#kayako":
			return '<p>' . t("Displays links to nodes created on this date") . '</p>';
			break;
	}
}

	/**
	 * Set beginning and end dates, retrieve posts from database
	 *
	 * @param int    $department_id
	 * @param string $display
	 *
	 * @return array
	 */
	function kayako_ticket_list($department_id, $display = 'page')
	{
		initKayako();
		$max_num = variable_get('kayako_max', 3);
		//$department_id = 6;
		$department = kyDepartment::get($department_id);
		$email      = $GLOBALS['user']->mail;
		$user       = kyUser::search($email);
		//Use Library API to retrieve current posts.
		$tickets = kyTicket::getAll($department, [], [], $user);

		return $tickets->getRawArray();
	}

	/**
	 * Implements hook_menu().
	 */
	function kayako_menu()
	{
		$items = [];

		$items['admin/config/content/kayako'] = [
			'title'            => 'Kayako HelpDesk',
			'description'      => 'Configuration for Kayako HelpDesk module',
			'page callback'    => 'drupal_get_form',
			'page arguments'   => ['kayako_form'],
			'access arguments' => ['access administration pages'],
			'type'             => MENU_NORMAL_ITEM,
		];
		$items['kayako']                      = [
			'title'            => 'Kayako HelpDesk',
			'page callback'    => '_kayako_page',
			'access arguments' => ['access kayako content'],
			'type'             => MENU_NORMAL_ITEM, //Will appear in Navigation menu.
		];
		$items['kayako_create_ticket']        = [
			'title'            => 'Kayako Create Ticket',
			'page callback'    => 'drupal_get_form',
			'page arguments'   => ['kayako_select_department_form', 'create_ticket'],
			'access arguments' => ['access kayako content'],
			'type'             => MENU_CALLBACK, //Will not appear in Navigation menu.
		];
		$items['kayako_list_tickets_first']   = [
			'title'            => 'Kayako List Tickets',
			'page callback'    => 'drupal_get_form',
			'page arguments'   => ['kayako_select_department_form', 'list_tickets'],
			'access arguments' => ['access kayako content'],
			'type'             => MENU_CALLBACK, //Will not appear in Navigation menu.
		];
		$items['kayako_list_tickets']         = [
			'title'            => 'Kayako List Tickets',
			'page callback'    => '_kayako_list_tickets',
			'access arguments' => ['access kayako content'],
			'type'             => MENU_CALLBACK, //Will not appear in Navigation menu.
		];
		$items['kayako_ticket_view']          = [
			'title'            => 'Kayako Ticket View',
			'page callback'    => 'drupal_get_form',
			'page arguments'   => ['kayako_update_ticket_form'],
			'access arguments' => ['access kayako content'],
			'type'             => MENU_CALLBACK, //Will not appear in Navigation menu.
		];

		return $items;
	}

	/**
	 * It creates the configuration form to get the REST API credentials
	 *
	 * @see kayako_menu()
	 */
	function kayako_form($form, &$form_state)
	{
		$form['kayako_api_key'] = [
			'#type'          => 'textfield',
			'#title'         => t('API Key'),
			'#default_value' => variable_get('kayako_api_key', 3),
			'#size'          => 60,
			'#maxlength'     => 60,
			'#description'   => t('Enter your REST API key provided in your admin panel at Kayako.'),
			'#required'      => true,
		];

		$form['kayako_api_url'] = [
			'#type'          => 'textfield',
			'#title'         => t('API URL'),
			'#default_value' => variable_get('kayako_api_url', 'http://rajat.kayako.com/api'),
			'#size'          => 60,
			'#maxlength'     => 50,
			'#description'   => t('Enter your REST API URL. (http://xxx.kayako.com/api)'),
			'#required'      => true,
		];

		$form['kayako_secret_key'] = [
			'#type'          => 'textarea',
			'#title'         => t('Secret Key'),
			'#default_value' => variable_get('kayako_secret_key', 'rajat'),
			'#cols'          => 60,
			'#rows'          => 5,
			'#description'   => t('Enter the secret key here.'),
			'#required'      => true,
		];
		try {
			initKayako();
			$stasuses_resultset   = kyTicketStatus::getAll()->filterByType(kyTicketStatus::TYPE_PUBLIC)->getRawArray();

			$priorities_resultset = kyTicketPriority::getAll()->filterByType(kyTicketPriority::TYPE_PUBLIC)->getRawArray();

			$types_resultset      = kyTicketType::getAll()->filterByType(kyTicketType::TYPE_PUBLIC)->getRawArray();

			$statuses             = [];
			$types                = [];
			$priorities           = [];
			foreach ($stasuses_resultset as $status_object) {
				$statuses[$status_object->getId()] = $status_object->getTitle();
			}
			foreach ($priorities_resultset as $priority_object) {
				$priorities[$priority_object->getId()] = $priority_object->getTitle();
			}
			foreach ($types_resultset as $type_object) {
				$types[$type_object->getId()] = $type_object->getTitle();
			}
			//$statuses = array('22' => t('aa'), 'pp');
			$form['kayako_default_ticket_status'] = [
				'#type'          => 'select',
				'#title'         => t('Default Status of Ticket'),
				'#default_value' => variable_get('kayako_default_ticket_status', 1),
				'#options'       => $statuses,
				'#description'   => t('The Status'),
			];

			//$types = array('22' => t('aa'), 'pp');
			$form['kayako_default_ticket_type'] = [
				'#type'          => 'select',
				'#title'         => t('Default type of Ticket'),
				'#default_value' => variable_get('kayako_default_ticket_type', 1),
				'#options'       => $types,
				'#description'   => t('The type'),
			];
			//$priorities = array('22' => t('asas'), 'pp');
			$form['kayako_default_ticket_priority'] = [
				'#type'          => 'select',
				'#title'         => t('Default priority of Ticket'),
				'#default_value' => variable_get('kayako_default_ticket_priority', 1),
				'#options'       => $priorities,
				'#description'   => t('The priority'),
			];
		} catch (Exception $e) {
		}

		return system_settings_form($form);
	}

	/**
	 * Implements validation from the Form API.
	 *
	 * @param array $form
	 * @param array $form_state
	 */
	function kayako_form_validate($form, &$form_state)
	{
		//Form Validation can be done here
	}

	/**
	 * Implements hook_permission().
	 */
	function kayako_permission()
	{
		return [
			'access kayako content' => [
				'title' => t('Access content for the Kayako HelpDesk module'),
			]
		];
	}

	/**
	 * @return array $page_array
	 */
	function _kayako_page()
	{
		//Array to contain items for the page to render.
		$items   = [];
		$items[] = ['data' => l('Create Ticket', 'kayako_create_ticket')];
		$items[] = ['data' => l('View Tickets', 'kayako_list_tickets_first')];

		$page_array['kayako_arguments'] = [
			'#title' => t('Welcome to Kayako HelpDesk'),
			'#items' => $items,
			//Theme hook with suggestion.
			'#theme' => 'item_list__kayako',
		];

		return $page_array;
	}

	/**
	 * @param integer $department_id
	 *
	 * @return array $output
	 */
	function _kayako_list_tickets($department_id)
	{
		initKayako();
		$tickets = kayako_ticket_list($department_id, 'page');
		drupal_set_title('Tickets List');
		$items = [];
		//Iterate over the resultset and format as links.
		foreach ($tickets as $ticket) {
			$items[] = [
				'data' => l($ticket->toString(), 'kayako_ticket_view/' . $ticket->getId()),
			];
		}
		$items[] = ['data' => l('Create Ticket', 'kayako_create_ticket')];
		if (empty($items)) { //No content in the last week.
			$page_array['kayako_arguments'] = [
				//Title serves as page subtitle
				'#title'  => t('All tickets created by you'),
				'#markup' => t('You haven\'t created any tickets.'),
			];
		} else {
			$page_array['kayako_arguments'] = [
				'#title' => t('All tickets created by you'),
				'#items' => $items,
				//Theme hook with suggestion.
				'#theme' => 'item_list__kayako',
			];

			$header = ['Ticket ID', 'Last Update', 'Last Replier', 'Department', 'Type', 'Status', 'Priority'];
			$rows   = [];
			foreach ($tickets as $ticket) {

				$rows[] = [
					'data' => [['data' => l($ticket->getSubject(), 'kayako_ticket_view/' . $ticket->getId()), 'colspan' => 7]], 'class' => ['subject'], 'style' => ['color: red; font-size: 15px']
				];


				$data   = [
					$ticket->getDisplayId(),
					$ticket->getLastActivity(),
					$ticket->getLastReplier(),
					$ticket->getDepartment()
						   ->getTitle(),
					$ticket->getType()
						   ->getTitle(),
					$ticket->getStatus()
						   ->getTitle(),
					['data'  => $ticket->getPriority()
									   ->getTitle(),
					 'style' => [
						 'color:' . $ticket->getPriority()
										   ->getForegroundColor() . '; background-color:' . $ticket->getPriority()
																								   ->getBackgroundColor() . ';'
					 ]
					]
				];
				$rows[] = $data;
			}
			$list_tickets            = theme('table', [
				'header'     => $header,
				'rows'       => $rows,
				'attributes' => ['class' => ['mytable']]
			]);
			$config                  = [];
			$config['type']          = 'select';
			$config['department_id'] = $department_id;
			$department_form         = drupal_get_form('kayako_select_department_form', 'list_tickets', $config);

			$output = render($department_form);
			$output .= render($list_tickets);

			return $output;
		}
	}

	/**
	 * @param array $form
	 * @param array $form_state
	 *
	 * @return array
	 */
	function kayako_update_ticket_form($form, &$form_state)
	{
		$ticket_id = isset($form_state['build_info']['args'][0]) ? $form_state['build_info']['args'][0] : 0;
		if ($ticket_id == 0 || !is_numeric($ticket_id)) { //Id not valid
			$page_array['kayako_arguments'] = [
				//Title serves as page subtitle
				'#title'  => t('All posts from the last week' . $ticket_id),
				'#markup' => t('No posts available.'),
			];
		} else {
			initKayako();
			$ticket               = kyTicket::get($ticket_id);
			$stasuses_resultset   = kyTicketStatus::getAll()->filterByType(kyTicketStatus::TYPE_PUBLIC)->getRawArray();

			$priorities_resultset = kyTicketPriority::getAll()->filterByType(kyTicketPriority::TYPE_PUBLIC)->getRawArray();

			$types_resultset      = kyTicketType::getAll()->filterByType(kyTicketType::TYPE_PUBLIC)->getRawArray();

			$statuses             = [];
			$types                = [];
			$priorities           = [];
			foreach ($stasuses_resultset as $status_object) {
				$statuses[$status_object->getId()] = $status_object->getTitle();
			}
			foreach ($priorities_resultset as $priority_object) {
				$priorities[$priority_object->getId()] = $priority_object->getTitle();
			}
			foreach ($types_resultset as $type_object) {
				$types[$type_object->getId()] = $type_object->getTitle();
			}
			drupal_set_title($ticket->getSubject());
			$form['#attributes']['enctype'] = 'multipart/form-data';
			$form['kayako_ticket_status']   = [
				'#type'          => 'select',
				'#title'         => t('Status of Ticket'),
				'#default_value' => $ticket->getStatus()
										   ->getId(),
				'#options'       => $statuses,
				'#description'   => t('The Status'),
				'#attributes'    => ['class' => ['custom-class']]
			];

			$form['kayako_ticket_type']     = [
				'#type'   => 'item',
				'#title'  => t('Type of Ticket'),
				'#markup' => $ticket->getType()
									->getTitle(),
			];
			$form['kayako_ticket_priority'] = [
				'#type'          => 'select',
				'#title'         => t('Priority of Ticket'),
				'#default_value' => $ticket->getPriority()
										   ->getId(),
				'#options'       => $priorities,
				'#description'   => t('The priority'),
			];

			$posts       = $ticket->getPosts()
								  ->getRawArray();
			$attachments = kyTicketAttachment::getAll($ticket->getId());

			foreach ($posts as $post) {

				$form['kayako_ticket_content_' . $post->getId()] = [
					'#type'       => 'item',
					'#name'       => 'kayako-ticket-post',
					'#title'      => t('Posted on: ' . date("F j, Y, g:i a", strtotime($post->getDateline())) . '  By: ' . $post->getCreator()
																																->getFullName()),
					'#markup'     => t($post->getContents()),
					'#attributes' => ['class' => ['kayako-ticket-post']]
				];
				foreach ($attachments as $attachment) {
					if ($attachment->getTicketPostId() == $post->getId()) {
						$form['kayako_ticket_post_' . $attachment->getFileName()] = [
							'#type'  => 'link',
							'#title' => t($attachment->getFileName() . '  '),
							'#href'  => file_create_url("temporary://" . $attachment->getFileName()),
						];
					}
				}
			}
			$form['kayako_ticket_id']           = [
				'#type'  => 'hidden',
				'#value' => $ticket_id
			];
			$form['kayako_post_reply_checkbox'] = [
				'#type'          => 'checkbox',
				'#title'         => 'Post Reply',
				'#default_value' => '',
				'#ajax'          => [
					'callback' => 'kayako_update_ticket_form_callback',
					'wrapper'  => 'textfields',
					'effect'   => 'fade',
				],
			];

			$form['textfields'] = [
				'#title'       => t(""),
				'#prefix'      => '<div id="textfields">',
				'#suffix'      => '</div>',
				'#type'        => 'fieldset',
				'#description' => t(''),
			];

			if (!empty($form_state['values']['kayako_post_reply_checkbox']) && $form_state['values']['kayako_post_reply_checkbox']) {
				$form['textfields']['kayako_ticket_new_post'] = [
					'#type'          => 'textarea',
					'#title'         => t(''),
					'#default_value' => '',
					'#cols'          => 60,
					'#rows'          => 15,
					'#description'   => t('You can type your message here.'),
					'#required'      => false,
				];
			}

			$form['files'] = [
				'#type'        => 'fieldset',
				'#title'       => t('Attachments'),
				'#collapsible' => true,
				'#collapsed'   => false,
				'#prefix'      => '<div id="files-wrapper">',
				'#suffix'      => '</div>',
			];

			if (empty($form_state['number_files'])) {
				$form_state['number_files'] = 1;
			}
			for ($a = 0; $a < $form_state['number_files']; $a++) {
				$form['files']['file_' . $a] = [
					'#title' => t(''),
					'#type'  => 'file',
				];
			}

			$form['files']['add'] = [
				'#type'   => 'submit',
				'#value'  => t('Add another file'),
				'#submit' => ['_addmore_add_one'],
				'#ajax'   => [
					'callback' => '_addmore_callback',
					'wrapper'  => 'files-wrapper',
				],
			];
			if ($form_state['number_files'] > 1) {
				$form['files']['remove'] = [
					'#type'   => 'submit',
					'#value'  => t('Remove File'),
					'#submit' => ['_addmore_remove_one'],
					'#ajax'   => [
						'callback' => '_addmore_callback',
						'wrapper'  => 'files-wrapper',
					],
				];
			}


			//get more fields depending on the department
			$form['department'] = [
				'#type'  => 'hidden',
				'#value' => $ticket->getDepartment()
								   ->getId()
			];
			$form['submit']     = [
				'#type'  => 'submit',
				'#value' => 'Update',
			];

			return $form;
		}
	}

	function _addmore_callback($form, &$form_state)
	{
		$form_state['storage']['step_one_values']['target'] = 'create_ticket';

		return $form['files'];
	}


	function _addmore_add_one($form, &$form_state)
	{
		$form_state['number_files']++;
		$form_state['rebuild'] = true;
	}


	function _addmore_remove_one($form, &$form_state)
	{
		if ($form_state['number_files'] > 1) {
			$form_state['number_files']--;
		}
		$form_state['rebuild'] = true;
	}

	function kayako_update_ticket_form_callback($form, &$form_state)
	{
		$form_state['rebuild'] = true;

		return $form['textfields'];
	}

	/**
	 * @param array $form
	 * @param array $form_state
	 *
	 */
	function kayako_update_ticket_form_submit($form, &$form_state)
	{
		if ($form_state['clicked_button']['#id'] == 'edit-next') {
			if (isset($form_state['input']['target']) && $form_state['input']['target'] == 'list_tickets') {
				drupal_set_message('This list displays all the tickets for particular department crated by you.');
				unset ($form_state['storage']); // This value must be unset for
				$department = $form_state['input']['department'];
				variable_set('selected_department', $department);
				$form_state['redirect'] = 'kayako_list_tickets/' . $department; // Redirects the user.
			} else {
				$form_state['storage']['step_two']        = true;
				$form_state['storage']['step_one_values'] = $form_state['values'];
				$form_state['rebuild']                    = true;
			}
		} else {
			$ticket_id           = isset($form_state['input']['kayako_ticket_id']) ? $form_state['input']['kayako_ticket_id'] : 0;
			$ticket_status       = isset($form_state['input']['kayako_ticket_status']) ? $form_state['input']['kayako_ticket_status'] : variable_get('kayako_default_ticket_status');
			$ticket_priority     = isset($form_state['input']['kayako_ticket_priority']) ? $form_state['input']['kayako_ticket_priority'] : variable_get('kayako_default_ticket_priority');
			$post_reply_checkbox = isset($form_state['input']['kayako_post_reply_checkbox']) ? $form_state['input']['kayako_post_reply_checkbox'] : 0;


			$ticket_new_post = isset($form_state['input']['kayako_ticket_new_post']) ? $form_state['input']['kayako_ticket_new_post'] : '';
			initKayako();
			$ticket = kyTicket::get($ticket_id);
			$ticket->setStatusId($ticket_status);
			$ticket->setPriorityId($ticket_priority);
			$validators = [];
			//$file will be 0 if the upload doesn't exist, or the $dest directory
			//isn't writable
			if ($post_reply_checkbox == 1) {
				//get the user
				$email          = $GLOBALS['user']->mail;
				$user_raw_array = kyUser::search($email)
										->getRawArray();
				$user           = $user_raw_array[0];
				$ticket_post    = $ticket->newPost($user, $ticket_new_post);
				$ticket_post->create();
				for ($i = 0; $i < $form_state['number_files']; $i++) {
					$file = file_save_upload('file_' . $i, $validators);
					if ($file != 0) {
						$na = $ticket_post->newAttachmentFromFile($file->uri);
						$na->create();
						unset($na);
					} else {
					}
				}
			}
			$ticket->update();
			drupal_set_message('Your ticket (ID:' . $ticket->getDisplayId() . ') has been updated');
			$form_state['redirect'] = 'kayako_list_tickets/' . $ticket->getDepartmentId(); // Redirects the user.
		}
	}

	/**
	 * Initializes the client.
	 */
	function initKayako()
	{
		//include all necessary classes and helper methods
		require_once("includes/kayako-php-api/kyIncludes.php");
		//initialize the client
		$config = new kyConfig(variable_get('kayako_api_url'), variable_get('kayako_api_key'), variable_get('kayako_secret_key'));
		$config->setDebugEnabled(false);
		kyConfig::set($config);
	}

	/**
	 * @param array $form
	 * @param array $form_state
	 *
	 * @return array $form
	 */
	function kayako_select_department_form($form, &$form_state)
	{
		if (isset($form_state['storage']['step_two'])) {
			switch ($form_state['storage']['step_one_values']['target']) {
				case 'create_ticket':
					return kayako_create_ticket_department_specific_form($form, $form_state);
					break;
				default:
					return kayako_create_ticket_department_specific_form($form, $form_state);
					break;
			}
		}
		initKayako();
		$department_tree = _kayako_getDepartmentsTree();
		foreach ($department_tree as $key => $val) {
			$options_array[$key] = t($val['department']);
			foreach ($val['child_departments'] as $child_dept_key => $child_dept_value) {
				$options_array[$child_dept_key] = t('=>' . $child_dept_value);
			}
		}
		if (isset($form_state['build_info']['args'][1]['type']) && $form_state['build_info']['args'][1]['type'] == 'select') {
			$form['department'] = [
				'#type'          => 'select',
				'#title'         => t('Department'),
				'#default_value' => isset($form_state['build_info']['args'][1]['department_id']) ? $form_state['build_info']['args'][1]['department_id'] : 0,
				'#options'       => $options_array,
				'#description'   => t('Select the applicable department'),
			];
		} else {
			$form['department'] = [
				'#type'          => 'radios',
				'#title'         => t('Department'),
				'#required'      => true,
				'#default_value' => isset($form_state['build_info']['args'][1]['department_id']) ? $form_state['build_info']['args'][1]['department_id'] : 0,
				'#options'       => $options_array,
				'#description'   => t('Select the applicable department'),
			];
		}
		$form['next']   = [
			'#type'  => 'submit',
			'#value' => 'Next >>',
		];
		$form['target'] = [
			'#type'  => 'hidden',
			'#value' => $form_state['build_info']['args'][0]
		];

		return $form;
	}

	/**
	 * @param array $form
	 * @param array $form_state
	 */
	function kayako_select_department_form_submit($form, &$form_state)
	{
		if ($form_state['clicked_button']['#id'] == 'edit-next') {
			if (isset($form_state['input']['target']) && $form_state['input']['target'] == 'list_tickets') {
				drupal_set_message('This list displays all the tickets for particular department crated by you.');
				unset ($form_state['storage']); // This value must be unset for
				$department = $form_state['input']['department'];
				variable_set('selected_department', $department);
				$form_state['redirect'] = 'kayako_list_tickets/' . $department; // Redirects the user.
			} else {
				$form_state['storage']['step_two']        = true;
				$form_state['storage']['step_one_values'] = $form_state['values'];
				$form_state['rebuild']                    = true;
			}
		} else {
			$ticket_status   = isset($form_state['input']['kayako_ticket_status']) ? $form_state['input']['kayako_ticket_status'] : variable_get('kayako_default_ticket_status');
			$ticket_type     = isset($form_state['input']['kayako_ticket_type']) ? $form_state['input']['kayako_ticket_type'] : variable_get('kayako_default_ticket_type');
			$ticket_priority = isset($form_state['input']['kayako_ticket_priority']) ? $form_state['input']['kayako_ticket_priority'] : variable_get('kayako_default_ticket_priority');
			initKayako();
			kyTicket::setDefaults($ticket_status, $ticket_priority, $ticket_type);
			//create the ticket
			/** @var $ticket kyTicket */
			$department = kyDepartment::get($form_state['input']['department']);
			//File attachment handling code
			$validators = [];
			$file       = file_save_upload('file_upload', $validators);
			//$file will be 0 if the upload doesn't exist, or the $dest directory
			//isn't writable
			$ticket = kyTicket::createNewAuto($department, $form_state['input']['kayako_full_name'], $form_state['input']['kayako_email_id'], $form_state['input']['kayako_ticket_content'], $form_state['input']['kayako_ticket_subject']);
			$ticket->create();
			$ticket_post = $ticket->getFirstPost();
			for ($i = 0; $i < $form_state['number_files']; $i++) {
				$file = file_save_upload('file_' . $i, $validators);
				if ($file) {
					$na = $ticket_post->newAttachmentFromFile($file->uri);
					$na->create();
				} else {
				}
			}

			//get ticket id
			$ticket_id      = $ticket->getId();
			$ticket_mask_id = $ticket->getDisplayId();

			//load ticket custom fields
			$file_custom_field_present = true;
			//$ticket_custom_fields = get_ticket_custom_fields($ticket, $file_custom_field_present);
			drupal_set_message('Your ticket (ID:' . $ticket_mask_id . ') has been submitted');
			unset ($form_state['storage']); // This value must be unset for
			$form_state['redirect'] = 'kayako'; // Redirects the user.
		}
	}

//Step two form
	/**
	 * @param array $form
	 * @param array $form_state
	 *
	 * @return array
	 */
	function kayako_create_ticket_department_specific_form($form, &$form_state)
	{
		// department id will be available as => $form_state['storage']['step_one_values']['department']
		initKayako();
		$stasuses_resultset   = kyTicketStatus::getAll()->filterByType(kyTicketStatus::TYPE_PUBLIC)->getRawArray();

		$priorities_resultset = kyTicketPriority::getAll()->filterByType(kyTicketPriority::TYPE_PUBLIC)->getRawArray();

		$types_resultset      = kyTicketType::getAll()->filterByType(kyTicketType::TYPE_PUBLIC)->getRawArray();

		$statuses             = [];
		$types                = [];
		$priorities           = [];
		foreach ($stasuses_resultset as $status_object) {
			$statuses[$status_object->getId()] = $status_object->getTitle();
		}
		foreach ($priorities_resultset as $priority_object) {
			$priorities[$priority_object->getId()] = $priority_object->getTitle();
		}
		foreach ($types_resultset as $type_object) {
			$types[$type_object->getId()] = $type_object->getTitle();
		}

		$form['#attributes']['enctype'] = 'multipart/form-data';
		$form['kayako_full_name']       = [
			'#type'          => 'textfield',
			'#title'         => t('Full Name'),
			'#default_value' => $GLOBALS['user']->name,
			'#size'          => 60,
			'#maxlength'     => 50,
			'#description'   => t('Enter your full name here.'),
			'#required'      => true,
		];
		$form['kayako_email_id']        = [
			'#type'          => 'textfield',
			'#title'         => t('Email ID'),
			'#default_value' => $GLOBALS['user']->mail,
			'#size'          => 60,
			'#maxlength'     => 50,
			'#description'   => t('Don\'t change this email id as you are logged in with this and this will be used for tracing and listing your tickets.'),
			'#required'      => true,
		];

		$form['kayako_ticket_status'] = [
			'#type'          => 'select',
			'#title'         => t('Default Status of Ticket'),
			'#default_value' => variable_get('kayako_default_ticket_status', 1),
			'#options'       => $statuses,
			'#description'   => t('The Status'),
		];

		$form['kayako_ticket_type']     = [
			'#type'          => 'select',
			'#title'         => t('Default type of Ticket'),
			'#default_value' => variable_get('kayako_default_ticket_type', 1),
			'#options'       => $types,
			'#description'   => t('The type'),
		];
		$form['kayako_ticket_priority'] = [
			'#type'          => 'select',
			'#title'         => t('Default priority of Ticket'),
			'#default_value' => variable_get('kayako_default_ticket_priority', 1),
			'#options'       => $priorities,
			'#description'   => t('The priority'),
		];

		$form['kayako_ticket_subject'] = [
			'#type'          => 'textfield',
			'#title'         => t('Subject'),
			'#default_value' => '',
			'#size'          => 60,
			'#maxlength'     => 50,
			'#description'   => t('Enter the subject of the message.'),
			'#required'      => true,
		];

		$form['kayako_ticket_content'] = [
			'#type'          => 'textarea',
			'#title'         => t('Contents'),
			'#default_value' => '',
			'#cols'          => 60,
			'#rows'          => 15,
			'#description'   => t('Enter the details about the ticket here.'),
			'#required'      => true,
		];

		$form['files'] = [
			'#type'        => 'fieldset',
			'#title'       => t('Attachments'),
			'#collapsible' => true,
			'#collapsed'   => false,
			'#prefix'      => '<div id="files">',
			'#suffix'      => '</div>',
		];

		if (empty($form_state['number_files'])) {
			$form_state['number_files'] = 1;
		}
		for ($a = 0; $a < $form_state['number_files']; $a++) {
			$form['files']['file_' . $a] = [
				'#title' => t(''),
				'#type'  => 'file',
			];
		}

		$form['files']['add'] = [
			'#type'   => 'submit',
			'#value'  => t('Add another file'),
			'#submit' => ['_addmore_add_one'],
			'#ajax'   => [
				'callback' => '_addmore_callback',
				'wrapper'  => 'files',
			],
		];
		if ($form_state['number_files'] > 1) {
			$form['files']['remove'] = [
				'#type'   => 'submit',
				'#value'  => t('Remove File'),
				'#submit' => ['_addmore_remove_one'],
				'#ajax'   => [
					'callback' => '_addmore_callback',
					'wrapper'  => 'files',
				],
			];
		}


		//get more fields depending on the department
		$form['department'] = [
			'#type'  => 'hidden',
			'#value' => $form_state['storage']['step_one_values']['department']
		];
		$form['submit']     = [
			'#type'  => 'submit',
			'#value' => 'Create Ticket',
		];

		return $form;
	}

	/**
	 * Returns list of departments in the form of array:
	 * array(
	 *     <top department id> => array(
	 *         'department' => <top department object>,
	 *         'child_departments' => array(<child department object>, ...)
	 *     ),
	 *     ),
	 *     ...
	 * )
	 *
	 * @return array
	 */
	function _kayako_getDepartmentsTree()
	{
		$departments_tree = [];
		$depart_array     = [];
		$all_departments  = kyDepartment::getAll()
										->filterByModule(kyDepartment::MODULE_TICKETS)
										->filterByType(kyDepartment::TYPE_PUBLIC);
		$top_departments  = $all_departments->filterByParentDepartmentId(null)
											->orderByDisplayOrder();
		//return $top_departments;
		foreach ($top_departments as $top_department) {
			/* @var $top_department kyDepartment */
			$departments_tree[$top_department->getId()]                      = [
				'department' => $top_department->getTitle()
			];
			$departments_tree[$top_department->getId()]['child_departments'] = [];
			foreach ($all_departments->filterByParentDepartmentId($top_department->getId())
									 ->orderByDisplayOrder() as $child_department) {
				$departments_tree[$top_department->getId()]['child_departments'][$child_department->getId()] = $child_department->getTitle();
			}
		}

		return $departments_tree;
	}

	/**
	 * Returns ticket custom fields in the form of array:
	 * array(
	 *     '<custom field group title>' => array(<custom field object>, ... ),
	 *     ...
	 * )
	 *
	 * @param kyTicket $ticket Ticket.
	 * @param bool     $file_custom_field_present
	 *
	 * @return array
	 */
	function _kayako_get_ticket_custom_fields(kyTicket $ticket, &$file_custom_field_present)
	{
		$custom_field_groups = $ticket->getCustomFieldGroups();
		if (count($custom_field_groups) === 0) {
			return [];
		}

		$custom_fields = [];
		foreach ($custom_field_groups as $custom_field_group) {
			/* @var $custom_field_group kyTicketCustomFieldGroup */

			$group_custom_fields = [];
			foreach ($custom_field_group->getFields() as $custom_field) {
				/* @var $custom_field kyCustomField */
				if (!$custom_field->getDefinition()
								  ->getIsUserEditable()
				) {
					continue;
				}

				if ($custom_field->getType() === kyCustomFieldDefinition::TYPE_FILE) {
					$file_custom_field_present = true;
				}

				$group_custom_fields[$custom_field->getDefinition()
												  ->getDisplayOrder()] = $custom_field;
			}

			if (count($group_custom_fields) > 0) {
				ksort($group_custom_fields, SORT_NUMERIC);
				$custom_fields[$custom_field_group->getTitle()] = array_values($group_custom_fields);
			}
		}

		return $custom_fields;
	}

